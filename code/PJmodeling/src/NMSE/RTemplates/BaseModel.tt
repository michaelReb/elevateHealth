<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@include file="ProjectInfoHeader.ttinclude" #>
# Model Type: Base Model (published version)

<#@include file="SetPaths.ttinclude" #>

<#@include file="CommonLibraries.ttinclude" #>

# Measure for run time: start_time
start_runtime <- Sys.time()

## #############################################################
## Load Remission Probability Data from GUI                  ##
## #############################################################

# whole number
# The weeks can be set by the user
var_remission_prob_week_t0 <- 1   # can not be changed by User - always start at first week 

<#
int RemProbT1 = SimProb.Instance.ParamRemissionProbT1;
int RemProbT2 = SimProb.Instance.ParamRemissionProbT2;
int RemProbT3 = SimProb.Instance.ParamRemissionProbT3;
int RemProbT4 = SimProb.Instance.ParamRemissionProbT4;
int RemProbT5 = SimProb.Instance.ParamRemissionProbT5;
#>

var_remission_prob_week_t1 <-  <#= RemProbT1 #> # default: 52
var_remission_prob_week_t2 <- <#= RemProbT2 #> # default: 103 
var_remission_prob_week_t3 <- <#= RemProbT3 #> # default: 156
var_remission_prob_week_t4 <- <#= RemProbT4 #> # default: 261
var_remission_prob_week_t5 <- <#= RemProbT5 #> # default: 520

# these values cannot be changed via the GUI
var_remission_prob_t0 <- 0.003567262
var_remission_prob_t1 <- 0.002459211
var_remission_prob_t2 <- 0.001931479
var_remission_prob_t3 <- 0.001746857 
var_remission_prob_t4 <- 0.001126182
var_remission_prob_t5 <- 0.000800859


df_remission_load <- matrix(0, nrow = 2000, ncol = 1)

for (targetrow in 1:2000)
{
  if (targetrow < var_remission_prob_week_t1) {
    df_remission_load[targetrow,] <- var_remission_prob_t0
  }
  else if (targetrow < var_remission_prob_week_t2)
  {
    df_remission_load[targetrow,] <- var_remission_prob_t1
  }
  else if (targetrow < var_remission_prob_week_t3)
  {
    df_remission_load[targetrow,] <- var_remission_prob_t2
  }
  else if (targetrow < var_remission_prob_week_t4)
  {
    df_remission_load[targetrow,] <- var_remission_prob_t3
  }
  else if (targetrow < var_remission_prob_week_t5)
  {
    df_remission_load[targetrow,] <- var_remission_prob_t4
  }
  else if (targetrow >= var_remission_prob_week_t5)
  {
    df_remission_load[targetrow,] <- var_remission_prob_t5
  }
}

readr::write_rds(df_remission_load, file.path(path_data_folder, "df_remission.rds"))


# Read preset data
df_rates <- readr::read_rds(file.path(path_data_folder, "df_rates.rds"))
df_UCT <- readr::read_rds( file.path(path_data_folder, "df_UCT.rds"))
df_remission <- readr::read_rds(file.path(path_data_folder, "df_remission.rds"))


###########################################
#        Adaptation of variables         ## 
#          Load Data From MPJM-GUI       ##
#                                        ##
########################################### 

# variables that can be changed by user
# 0 Prevalence is not mapped in the current model --> extension is possible



# 1 Diagnosis Rate: Symptomatic --> Diagnosed x% higher

var_sym_diag_rate_percent  <- <#= SimProb.Instance.ParamDiagnosisRate #>  # Parameter is defined by user [0 ; 1.5]
var_sym_diag_rate <- var_sym_diag_rate_percent / 0.81

#var_sym_diag_rate

# 2 Treatment Rate: Diagnosed --> Treatment Start x% higher

var_diag_treat_rate_percent  <- <#= SimProb.Instance.ParamTreatmentRate #>  # Parameter is defined by user [0 ; 1.5]
var_diag_treat_rate <- var_diag_treat_rate_percent / 0.653

# 3 Number of Cycles --> default value 120 [Range from 80 to 160]

number_of_cycles_t <- 120 # not yet adjustable

# 4 Share High UTC --> usually fixed Parameter to 12  [Range from 10 to 14]

cutoff_highUCT <- 12  # not yet adjustable


# 5 Weeks of interventions --> usually 6, 18, 30

var_treatment_initiation_time <- <#= SimProb.Instance.ParamTreatmentInitiationTime #> - 7
var_treatment_escaltion_time1 <- var_treatment_initiation_time + <#= SimProb.Instance.ParamTreatmentEscalationTime1 #>
var_treatment_escaltion_time2 <- var_treatment_escaltion_time1 + <#= SimProb.Instance.ParamTreatmentEscalationTime2 #>

# 6 Symptomatic  --> diagnosed Mean time (weeks)

# default 104.3 weeks

var_sym_diag_mean_time_weeks <- <#= SimProb.Instance.ParamDiagnosisTime #>

# Convention
# default_base_model_export_rates.RDS
# default_base_improved_export_rates.RDS
# default_bridge_export_rates.RDS
# default_DigiMoc_export_rates.RDS

## Parameters for model ############################################
# Fit disease states


# Matrix with States for each week 
states_to_fit <- matrix(0, nrow = number_of_cycles_t, ncol = 3)
t_vec <- c(var_treatment_initiation_time, var_treatment_escaltion_time1, var_treatment_escaltion_time2) ## week of interventions
#t_vec <- c(6,18,30)

t_vec <- t_vec - 5  ## Adjustment

last_elem <- tail(t_vec, n = 1)  # Get the last element of t_vec
additional_values <- seq(from = last_elem + 1, to = number_of_cycles_t, by = 10)
t_vec_new <- c(t_vec, additional_values)

# Define values for states


values_to_assign <- matrix(c(0.614, 0.3088, 0.0772,
                             0.1842, 0.65264, 0.16316,
                             0.05526, 0.65264, 0.2921), ncol = 3, byrow = TRUE)
#
#
#

# values_to_assign
# Assign values to specific rows in states_to_fit matrix

# row then column

for (targetrow in 1:number_of_cycles_t)
{
  if (targetrow == t_vec[1]) {
    states_to_fit[targetrow,] <- values_to_assign[1,]
  }
  else if (targetrow < t_vec[2])
  {
    states_to_fit[targetrow,] <- c(0,0,0)
  }
  else if (targetrow == t_vec[2])
  {
    states_to_fit[targetrow,] <- values_to_assign[2,]
  }
  else if (targetrow < t_vec[3])
  {
    states_to_fit[targetrow,] <- c(0,0,0)
  }
  else if (targetrow == t_vec[3])
    states_to_fit[targetrow,] <- values_to_assign[3,]
  else 
  {
    states_to_fit[targetrow,] <- c(0,0,0)
  }  
}

residual <- function(variables) {
  
  # Assuming model_diseasestates is a predefined function
  temp <- model_diseasestates(variables)
  
  # Calculate residuals: element-wise difference, square, and sum
  res <- (states_to_fit[t_vec_new[1:3], ] - temp[t_vec_new[1:3], ])^2
  
  # Sum the squared differences
  return(sum(res))
}

#print(states_to_fit)
#print(t_vec)
#print(t_vec_new)

## ######################################
## Initial Parameters for 3x3 Matrix  ##
## #####################################

start_params <- c(0.838, 0.162, 0.00, 0.009, 0.904, 0.087, 0.009, 0.192, 0.799) 



## Print previously read data
# print(df_rates)
# print(df_UCT)
# print(df_diseasestates_input)
# print(df_remission)

# Fit the model using least squares

out <- stats::optim(start_params, residual, method = "L-BFGS-B", lower = 0, upper = 1)

# out <- trustOptim::trust.optim(start_params, residual, grad, hess, method="Sparse")
# diseaseprobabilities_fitted is for control
# Reshape der 1D-Array in eine 3x3-Matrix

diseaseprobabilities_fitted <- matrix(out$par, nrow = 3, ncol = 3, byrow = TRUE)

# Normalisierung der Zeilen der Matrix mit der L1-Norm
diseaseprobabilities_fitted <- t(apply(diseaseprobabilities_fitted, 1, function(row) row / sum(abs(row))))

# Anzeige der normalisierten Matrix 
print(diseaseprobabilities_fitted)

## ###################################### ##
## Export Model and actual Data ##########
## ###################################### ##
    
  readr::write_rds(model_diseasestates(out$par), file.path(path_data_folder, "diseasestates_model.rds"))
  readr::write_csv(as.data.frame(model_diseasestates(out$par)), file.path(path_data_folder, "diseasestates_model.csv"))
  writexl::write_xlsx(as.data.frame(model_diseasestates(out$par)), file.path(path_data_folder, "diseasestates_model.xlsx"))
  
#  df_diseasestates_input_df <- as.data.frame(df_diseasestates_input)
#  readr::write_rds(df_diseasestates_input_df, file.path(path_data_folder, "diseasestates_input.rds"))
#  readr::write_csv(df_diseasestates_input_df, file.path(path_data_folder, "diseasestates_input.csv"))
#  writexl::write_xlsx(df_diseasestates_input_df, file.path(path_data_folder, "diseasestates_input.xlsx"))

# ####################################### #
## Plot the model and the actual data ####
# ####  03_plot_state_probabilities.r #### #
# ####################################### #

rateMatrix <- as.matrix(df_rates)
UCTMatrix <- as.matrix(df_UCT)
states <- colnames(rateMatrix)

######################################## #
# Define Transition Matrix  ####
######################################## #

time <- 1  # time for rateMatrix in weeks
transMatrix <- 1 - exp(-rateMatrix / time)
transMatrix[6:8, 6:8] <- diseaseprobabilities_fitted

# set diagonal elements to 0 and calculate diagonal elements as 1-(row sum)

transMatrix <- recalculate_main_diagonal(transMatrix)
check_matrix_row_sum(transMatrix)

# Print transition matrix
# Save matrices and states to CSV files

readr::write_csv(as.data.frame(rateMatrix), file.path(path_data_folder, "rateMatrix.csv")) 
readr::write_csv(as.data.frame(transMatrix), file.path(path_data_folder, "transMatrix.csv"))
readr::write_csv(as.data.frame(states), file.path(path_data_folder, "states.csv"))

print(round(transMatrix,3))
print(round(transMatrix[1:8, 9],3))
print(states)

## ####################################### # 
##    Time Evolution and Steady State   #### 
## ####################################### # 

remission_prob <- as.matrix(df_remission)
print(round(df_remission[100,],3))
transMatrix [1:8, 9] <- remission_prob[100,]
print(transMatrix)

########################################### #
#        Adaptation of transMatrix       ## #
########################################### #

transMatrix_new <- transMatrix  

# Imputation of new Values

# 1a Diagnosis Rate: Symptomatic --> Diagnosed x% higher
# Check whether Variable is 0 --> Set to 1 example (do we need this check?)

#var_sym_diag_rate
transMatrix_new [1, 2] <- transMatrix[1, 2] * var_sym_diag_rate                            # Changed Diagnoses Rate
#transMatrix_new [1, 3] <- transMatrix[1, 2] + transMatrix[1, 2] - transMatrix_new [1, 2]   # Sum stays the same


# 1b var_sym_diag_mean_time_weeks <- 104.3   meantime goes up diag_rate goes down (and vice versa)
var_sym_diag_mean_time_weeks_default <- 104.3
transMatrix_new [1, 2] <- transMatrix[1, 2] * (var_sym_diag_mean_time_weeks_default/var_sym_diag_mean_time_weeks)



# 2 Treatment Rate: Diagnosed --> Treatment Start x% higher
transMatrix_new [2, 4] <- transMatrix[2, 4] * var_diag_treat_rate                                          # Changed treatment rate
#transMatrix_new [2, 5] <- transMatrix[2, 5] + transMatrix[2,4] - transMatrix_new[2, 4] * var_diag_treat_rate  # Sum stays the same

# 3 User provided parameters for treament start to ...
transMatrix_new [4, 6] <- <#= SimProb.Instance.ParamUncontrolledStandard #>
transMatrix_new [4, 7] <- <#= SimProb.Instance.ParamaControlledStandard #>
transMatrix_new [4, 8] <- <#= SimProb.Instance.ParamSymptomFreeStandard #>



print(transMatrix)
print(transMatrix_new)

steadystate_statusquo <- get_steadystate(transMatrix)
reshaped_steadystate_statusquo <- reshape_steadystate_variables(steadystate_statusquo, states, UCTMatrix, cutoff_highUCT)

steadystate_new <- get_steadystate(transMatrix_new)
reshaped_steadystate_new <- reshape_steadystate_variables(steadystate_new, states, UCTMatrix, cutoff_highUCT)



########################################### #
#       Definition of Interventions      ####
########################################### #


# Educational Effect
# KOL diagnosis program | 36% higher diagnosis rate 

transMatrix_edu <- transMatrix
var_diagratio_edu <- <#= SimProb.Instance.ParamEducationInterventionPatients #>

transMatrix_edu[1, 2] <- transMatrix[1, 2] + transMatrix[1, 3] * var_diagratio_edu 
transMatrix_edu[1, 3] <- transMatrix[1, 3] - transMatrix[1, 3] * var_diagratio_edu

# Awareness Campaign improves Diagnosis rate by Factor var_diagrate

var_diagrate_awa <- <#= SimProb.Instance.ParamAwarenessIntervention #>
transMatrix_awa <- transMatrix  

transMatrix_awa[1, 2] <- transMatrix[1, 2] * (1+var_diagrate_awa)
transMatrix_awa[1, 3] <- transMatrix[1, 3] * (1+var_diagrate_awa)

# Treatment Effect
# Treatment ratio (DMP) 

transMatrix_dmp <- transMatrix
var_treatmentratio_treat <- <#= SimProb.Instance.ParamEducationInterventionPhysiciansStart #>

transMatrix_dmp [2, 4] <- transMatrix[2, 4] + transMatrix[2, 4] * var_treatmentratio_treat
transMatrix_dmp [2, 5] <- transMatrix[2, 5] - transMatrix[2, 4] * var_treatmentratio_treat


# Combined Effect of all inventions 
# treatment ratio (all interventions)


transMatrix_all1 <- transMatrix
transMatrix_all1[1, 2] <- (transMatrix[1, 2] + transMatrix[1, 3] * var_diagratio_edu) * var_diagrate_awa  
#transMatrix_all1[1, 3] <- (transMatrix[1, 3] - transMatrix[1, 3] * var_diagratio_edu) * var_diagrate_awa  
transMatrix_all1[2, 4] <- transMatrix[2, 4] + transMatrix[2, 4] * var_treatmentratio_treat  
transMatrix_all1[2, 5] <- transMatrix[2, 5] - transMatrix[2, 4] * var_treatmentratio_treat


steadystate_edu <- get_steadystate(transMatrix_edu)
reshaped_steadystate_edu <- reshape_steadystate_variables(steadystate_edu, states, UCTMatrix, cutoff_highUCT)


steadystate_awa <- get_steadystate(transMatrix_awa)
reshaped_steadystate_awa <- reshape_steadystate_variables(steadystate_awa, states, UCTMatrix, cutoff_highUCT)


steadystate_dmp <- get_steadystate(transMatrix_dmp)
reshaped_steadystate_dmp <- reshape_steadystate_variables(steadystate_dmp, states, UCTMatrix, cutoff_highUCT)

steadystate_all1 <- get_steadystate(transMatrix_all1)
reshaped_steadystate_all1 <- reshape_steadystate_variables(steadystate_all1, states, UCTMatrix, cutoff_highUCT)


share_highUCT_plot <- c( (100-reshaped_steadystate_statusquo$share_highUCT),
                         reshaped_steadystate_statusquo$share_highUCT,
                         (100-reshaped_steadystate_new$share_highUCT),
                         reshaped_steadystate_new$share_highUCT,
                         (100-reshaped_steadystate_edu$share_highUCT),
                         reshaped_steadystate_edu$share_highUCT, 
                         (100-reshaped_steadystate_awa$share_highUCT),
                         reshaped_steadystate_awa$share_highUCT,
                         (100-reshaped_steadystate_dmp$share_highUCT),
                         reshaped_steadystate_dmp$share_highUCT)


################################## #
#           Plotting           ### #
################################## #

# Barplot steady-state base model

plot_steady_state_base_model <- function(){
par(mar=c(3, 9, 2, 1) + 3, col.axis="darkblue", col.main="darkblue")
bar_positions <- barplot(
  t(reshaped_steadystate_statusquo$aggregated_states_df),  # Transpose data for correct arrangement
  beside = TRUE,           # Grouped bars side-by-side
  col = rainbow(5),        # Colors for bars
  names.arg = colnames(reshaped_steadystate_statusquo$aggregated_states_df),  # X-axis labels
  main = "Steady-state base model",  # Chart title
  xlab = "Population (%)",          # X-axis label
  horiz = TRUE,                     # Horizontal bars
  las = 1,                          # X-axis labels horizontal
  xlim = c(0, 50),                  # Set x-axis limit from 0% to 50%
  space = c(0.1, 1)                 # Adjust spacing between bars
)
text(
  x = t(reshaped_steadystate_statusquo$aggregated_states_df),  # Values of bars
  y = bar_positions,                                          # Position of bars
  labels = round(t(reshaped_steadystate_statusquo$aggregated_states_df), 1), # Display values rounded to 1 decimal
  pos = 4,                                                    # Position text to the right of bars
  cex = 0.8,                                                  # Size of text
  col = "darkblue"                                            # Color of text
)

}

# Save the plot as a PNG file
png(file.path(path_figures_folder, "Steady_state_base_model.png"), width = 800, height = 600)
plot_steady_state_base_model()
dev.off()

# Save the plot as a PDF file
pdf(file.path(path_figures_folder, "Steady_state_base_model.pdf"), width = 8, height = 6)
plot_steady_state_base_model()
dev.off()





# Barplot steady-state new model

plot_steady_state_new_model <- function(){
par(mar=c(3, 9, 2, 1) + 3, col.axis="darkblue", col.main="darkblue")
bar_positions <- barplot(
  t(reshaped_steadystate_new$aggregated_states_df),  # Transpose data for correct arrangement
  beside = TRUE,           # Grouped bars side-by-side
  col = rainbow(5),        # Colors for bars
  names.arg = colnames(reshaped_steadystate_new$aggregated_states_df),  # X-axis labels
  main = "Steady-state new model",  # Chart title
  xlab = "Population (%)",          # X-axis label
  horiz = TRUE,                     # Horizontal bars
  las = 1,                          # X-axis labels horizontal
  xlim = c(0, 50),                  # Set x-axis limit from 0% to 50%
  space = c(0.1, 1)                 # Adjust spacing between bars
)
text(
  x = t(reshaped_steadystate_new$aggregated_states_df),  # Values of bars
  y = bar_positions,                                     # Position of bars
  labels = round(t(reshaped_steadystate_new$aggregated_states_df), 1), # Display values rounded to 1 decimal
  pos = 4,                                               # Position text to the right of bars
  cex = 0.8,                                             # Size of text
  col = "darkblue"                                       # Color of text
)
}

# Save the plot as a PNG file
png(file.path(path_figures_folder, "Steady_state_new_model.png"), width = 800, height = 600)
plot_steady_state_new_model()
dev.off()

# Save the plot as a PDF file
pdf(file.path(path_figures_folder, "Steady_state_new_model.pdf"), width = 8, height = 6)
plot_steady_state_new_model()
dev.off()

#########################################################################




# Beispiel-Daten mit Kategorien erstellen
scenarios <- c("01 Base Model", "02 New Model", "03 Education Model", "04 Awareness Model", "05 DMP Model")
scenarios <- rep(c("01 Base Model", "02 New Model", "03 Education Model", "04 Awareness Model", "05 DMP Model"), each = 2)
category <- factor(rep(c("Low", "High"), times = 5), levels = c("Low", "High"))  # Reihenfolge festlegen
values <- share_highUCT_plot

data <- data.frame(scenarios, category, values)

plot_high_uct <- function(){
ggplot(data, aes(x = scenarios, y = values, fill = category)) +
  geom_bar(stat = "identity") +
  geom_text(data = subset(data, category == "High"), aes(label = round(values, 1)), 
            position = position_stack(vjust = 1.15), size = 4) +  # Nur Werte für "High"
  labs(title = "Share of High UCT",
       x = "Scenario",
       y = "Percentage (%)") +
  ylim(0, 100) +  # Skaliert die y-Achse bis 100%
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = c("steelblue", "orange"))  # Farben für die Kategorien
  }
# Save the plot as PNG and PDF
ggsave(filename = file.path(path_figures_folder, "Share_of_high_uct.png"), plot=plot_high_uct(), width = 8, height = 6, units = "in")
ggsave(filename = file.path(path_figures_folder, "Share_of_high_uct.pdf"), plot=plot_high_uct(), width = 8, height = 6, units = "in")
