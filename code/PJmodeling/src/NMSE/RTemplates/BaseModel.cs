// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NMSE.RTemplates
{
    using System.Globalization;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class BaseModel : BaseModelBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("# This code has been generated with version 0.9 of the \'Markov Patient Journey Mo" +
                    "delling\' Application\r\n# Find the current version at: https://github.com/novartis" +
                    "\r\n#");
            this.Write("\r\n# Model Type: Base Model (published version)\r\n\r\n");
            this.Write("# Paths\r\n\r\nsetwd (\".\")\r\n\r\npath_figures_folder <- \"figures\" \r\npath_data_folder <- " +
                    "\"data\"\r\n\r\ndir.create(path_figures_folder, showWarnings = FALSE)\r\ndir.create(path" +
                    "_data_folder, showWarnings = FALSE)");
            this.Write("\r\n\r\n");
            this.Write(@"library(stats)
library(base)
library(ggplot2)
library(matrixdist)
library(tidyverse)
library(expm)
library(trustOptim)
library(pracma)

# methods used for multiple models are defined in a separate file
source(""functions.R"")

# for debugging purposes
sessionInfo()
");
            this.Write(@"

# Measure for run time: start_time
start_runtime <- Sys.time()

## #############################################################
## Load Remission Probability Data from GUI                  ##
## #############################################################

# whole number
# The weeks can be set by the user
var_remission_prob_week_t0 <- 1   # can not be changed by User - always start at first week 

");
            
            #line 26 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"

int RemProbT1 = SimProb.Instance.ParamRemissionProbT1;
int RemProbT2 = SimProb.Instance.ParamRemissionProbT2;
int RemProbT3 = SimProb.Instance.ParamRemissionProbT3;
int RemProbT4 = SimProb.Instance.ParamRemissionProbT4;
int RemProbT5 = SimProb.Instance.ParamRemissionProbT5;

            
            #line default
            #line hidden
            this.Write("\r\nvar_remission_prob_week_t1 <-  ");
            
            #line 34 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RemProbT1));
            
            #line default
            #line hidden
            this.Write(" # default: 52\r\nvar_remission_prob_week_t2 <- ");
            
            #line 35 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RemProbT2));
            
            #line default
            #line hidden
            this.Write(" # default: 103 \r\nvar_remission_prob_week_t3 <- ");
            
            #line 36 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RemProbT3));
            
            #line default
            #line hidden
            this.Write(" # default: 156\r\nvar_remission_prob_week_t4 <- ");
            
            #line 37 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RemProbT4));
            
            #line default
            #line hidden
            this.Write(" # default: 261\r\nvar_remission_prob_week_t5 <- ");
            
            #line 38 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RemProbT5));
            
            #line default
            #line hidden
            this.Write(" # default: 520\r\n\r\n# these values cannot be changed via the GUI\r\nvar_remission_pr" +
                    "ob_t0 <- 0.003567262\r\nvar_remission_prob_t1 <- 0.002459211\r\nvar_remission_prob_t" +
                    "2 <- 0.001931479\r\nvar_remission_prob_t3 <- 0.001746857 \r\nvar_remission_prob_t4 <" +
                    "- 0.001126182\r\nvar_remission_prob_t5 <- 0.000800859\r\n\r\n\r\ndf_remission_load <- ma" +
                    "trix(0, nrow = 2000, ncol = 1)\r\n\r\nfor (targetrow in 1:2000)\r\n{\r\n  if (targetrow " +
                    "< var_remission_prob_week_t1) {\r\n    df_remission_load[targetrow,] <- var_remiss" +
                    "ion_prob_t0\r\n  }\r\n  else if (targetrow < var_remission_prob_week_t2)\r\n  {\r\n    d" +
                    "f_remission_load[targetrow,] <- var_remission_prob_t1\r\n  }\r\n  else if (targetrow" +
                    " < var_remission_prob_week_t3)\r\n  {\r\n    df_remission_load[targetrow,] <- var_re" +
                    "mission_prob_t2\r\n  }\r\n  else if (targetrow < var_remission_prob_week_t4)\r\n  {\r\n " +
                    "   df_remission_load[targetrow,] <- var_remission_prob_t3\r\n  }\r\n  else if (targe" +
                    "trow < var_remission_prob_week_t5)\r\n  {\r\n    df_remission_load[targetrow,] <- va" +
                    "r_remission_prob_t4\r\n  }\r\n  else if (targetrow >= var_remission_prob_week_t5)\r\n " +
                    " {\r\n    df_remission_load[targetrow,] <- var_remission_prob_t5\r\n  }\r\n}\r\n\r\nreadr:" +
                    ":write_rds(df_remission_load, file.path(path_data_folder, \"df_remission.rds\"))\r\n" +
                    "\r\n\r\n# Read preset data\r\ndf_rates <- readr::read_rds(file.path(path_data_folder, " +
                    "\"df_rates.rds\"))\r\ndf_UCT <- readr::read_rds( file.path(path_data_folder, \"df_UCT" +
                    ".rds\"))\r\ndf_remission <- readr::read_rds(file.path(path_data_folder, \"df_remissi" +
                    "on.rds\"))\r\n\r\n\r\n###########################################\r\n#        Adaptation " +
                    "of variables         ## \r\n#          Load Data From MPJM-GUI       ##\r\n#        " +
                    "                                ##\r\n########################################### " +
                    "\r\n\r\n# variables that can be changed by user\r\n# 0 Prevalence is not mapped in the" +
                    " current model --> extension is possible\r\n\r\n\r\n\r\n# 1 Diagnosis Rate: Symptomatic " +
                    "--> Diagnosed x% higher\r\n\r\nvar_sym_diag_rate_percent  <- ");
            
            #line 100 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamDiagnosisRate));
            
            #line default
            #line hidden
            this.Write("  # Parameter is defined by user [0 ; 1.5]\r\nvar_sym_diag_rate <- var_sym_diag_rat" +
                    "e_percent / 0.81\r\n\r\n#var_sym_diag_rate\r\n\r\n# 2 Treatment Rate: Diagnosed --> Trea" +
                    "tment Start x% higher\r\n\r\nvar_diag_treat_rate_percent  <- ");
            
            #line 107 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamTreatmentRate));
            
            #line default
            #line hidden
            this.Write(@"  # Parameter is defined by user [0 ; 1.5]
var_diag_treat_rate <- var_diag_treat_rate_percent / 0.653

# 3 Number of Cycles --> default value 120 [Range from 80 to 160]

number_of_cycles_t <- 120 # not yet adjustable

# 4 Share High UTC --> usually fixed Parameter to 12  [Range from 10 to 14]

cutoff_highUCT <- 12  # not yet adjustable


# 5 Weeks of interventions --> usually 6, 18, 30

var_treatment_initiation_time <- ");
            
            #line 121 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamTreatmentInitiationTime));
            
            #line default
            #line hidden
            this.Write(" - 7\r\nvar_treatment_escaltion_time1 <- var_treatment_initiation_time + ");
            
            #line 122 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamTreatmentEscalationTime1));
            
            #line default
            #line hidden
            this.Write("\r\nvar_treatment_escaltion_time2 <- var_treatment_escaltion_time1 + ");
            
            #line 123 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamTreatmentEscalationTime2));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n# 6 Symptomatic  --> diagnosed Mean time (weeks)\r\n\r\n# default 104.3 weeks\r\n\r\n" +
                    "var_sym_diag_mean_time_weeks <- ");
            
            #line 129 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamDiagnosisTime));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n# Convention\r\n# default_base_model_export_rates.RDS\r\n# default_base_improved_" +
                    "export_rates.RDS\r\n# default_bridge_export_rates.RDS\r\n# default_DigiMoc_export_ra" +
                    "tes.RDS\r\n\r\n## Parameters for model ############################################\r" +
                    "\n# Fit disease states\r\n\r\n\r\n# Matrix with States for each week \r\nstates_to_fit <-" +
                    " matrix(0, nrow = number_of_cycles_t, ncol = 3)\r\nt_vec <- c(var_treatment_initia" +
                    "tion_time, var_treatment_escaltion_time1, var_treatment_escaltion_time2) ## week" +
                    " of interventions\r\n#t_vec <- c(6,18,30)\r\n\r\nt_vec <- t_vec - 5  ## Adjustment\r\n\r\n" +
                    "last_elem <- tail(t_vec, n = 1)  # Get the last element of t_vec\r\nadditional_val" +
                    "ues <- seq(from = last_elem + 1, to = number_of_cycles_t, by = 10)\r\nt_vec_new <-" +
                    " c(t_vec, additional_values)\r\n\r\n# Define values for states\r\n\r\n\r\nvalues_to_assign" +
                    " <- matrix(c(0.614, 0.3088, 0.0772,\r\n                             0.1842, 0.6526" +
                    "4, 0.16316,\r\n                             0.05526, 0.65264, 0.2921), ncol = 3, b" +
                    "yrow = TRUE)\r\n#\r\n#\r\n#\r\n\r\n# values_to_assign\r\n# Assign values to specific rows in" +
                    " states_to_fit matrix\r\n\r\n# row then column\r\n\r\nfor (targetrow in 1:number_of_cycl" +
                    "es_t)\r\n{\r\n  if (targetrow == t_vec[1]) {\r\n    states_to_fit[targetrow,] <- value" +
                    "s_to_assign[1,]\r\n  }\r\n  else if (targetrow < t_vec[2])\r\n  {\r\n    states_to_fit[t" +
                    "argetrow,] <- c(0,0,0)\r\n  }\r\n  else if (targetrow == t_vec[2])\r\n  {\r\n    states_" +
                    "to_fit[targetrow,] <- values_to_assign[2,]\r\n  }\r\n  else if (targetrow < t_vec[3]" +
                    ")\r\n  {\r\n    states_to_fit[targetrow,] <- c(0,0,0)\r\n  }\r\n  else if (targetrow == " +
                    "t_vec[3])\r\n    states_to_fit[targetrow,] <- values_to_assign[3,]\r\n  else \r\n  {\r\n" +
                    "    states_to_fit[targetrow,] <- c(0,0,0)\r\n  }  \r\n}\r\n\r\nresidual <- function(vari" +
                    "ables) {\r\n  \r\n  # Assuming model_diseasestates is a predefined function\r\n  temp " +
                    "<- model_diseasestates(variables)\r\n  \r\n  # Calculate residuals: element-wise dif" +
                    "ference, square, and sum\r\n  res <- (states_to_fit[t_vec_new[1:3], ] - temp[t_vec" +
                    "_new[1:3], ])^2\r\n  \r\n  # Sum the squared differences\r\n  return(sum(res))\r\n}\r\n\r\n#" +
                    "print(states_to_fit)\r\n#print(t_vec)\r\n#print(t_vec_new)\r\n\r\n## ###################" +
                    "###################\r\n## Initial Parameters for 3x3 Matrix  ##\r\n## ##############" +
                    "#######################\r\n\r\nstart_params <- c(0.838, 0.162, 0.00, 0.009, 0.904, 0" +
                    ".087, 0.009, 0.192, 0.799) \r\n\r\n\r\n\r\n## Print previously read data\r\n# print(df_rat" +
                    "es)\r\n# print(df_UCT)\r\n# print(df_diseasestates_input)\r\n# print(df_remission)\r\n\r\n" +
                    "# Fit the model using least squares\r\n\r\nout <- stats::optim(start_params, residua" +
                    "l, method = \"L-BFGS-B\", lower = 0, upper = 1)\r\n\r\n# out <- trustOptim::trust.opti" +
                    "m(start_params, residual, grad, hess, method=\"Sparse\")\r\n# diseaseprobabilities_f" +
                    "itted is for control\r\n# Reshape der 1D-Array in eine 3x3-Matrix\r\n\r\ndiseaseprobab" +
                    "ilities_fitted <- matrix(out$par, nrow = 3, ncol = 3, byrow = TRUE)\r\n\r\n# Normali" +
                    "sierung der Zeilen der Matrix mit der L1-Norm\r\ndiseaseprobabilities_fitted <- t(" +
                    "apply(diseaseprobabilities_fitted, 1, function(row) row / sum(abs(row))))\r\n\r\n# A" +
                    "nzeige der normalisierten Matrix \r\nprint(diseaseprobabilities_fitted)\r\n\r\n## ####" +
                    "################################## ##\r\n## Export Model and actual Data #########" +
                    "#\r\n## ###################################### ##\r\n    \r\n  readr::write_rds(model_" +
                    "diseasestates(out$par), file.path(path_data_folder, \"diseasestates_model.rds\"))\r" +
                    "\n  readr::write_csv(as.data.frame(model_diseasestates(out$par)), file.path(path_" +
                    "data_folder, \"diseasestates_model.csv\"))\r\n  writexl::write_xlsx(as.data.frame(mo" +
                    "del_diseasestates(out$par)), file.path(path_data_folder, \"diseasestates_model.xl" +
                    "sx\"))\r\n  \r\n#  df_diseasestates_input_df <- as.data.frame(df_diseasestates_input)" +
                    "\r\n#  readr::write_rds(df_diseasestates_input_df, file.path(path_data_folder, \"di" +
                    "seasestates_input.rds\"))\r\n#  readr::write_csv(df_diseasestates_input_df, file.pa" +
                    "th(path_data_folder, \"diseasestates_input.csv\"))\r\n#  writexl::write_xlsx(df_dise" +
                    "asestates_input_df, file.path(path_data_folder, \"diseasestates_input.xlsx\"))\r\n\r\n" +
                    "# ####################################### #\r\n## Plot the model and the actual da" +
                    "ta ####\r\n# ####  03_plot_state_probabilities.r #### #\r\n# #######################" +
                    "################ #\r\n\r\nrateMatrix <- as.matrix(df_rates)\r\nUCTMatrix <- as.matrix(" +
                    "df_UCT)\r\nstates <- colnames(rateMatrix)\r\n\r\n#####################################" +
                    "### #\r\n# Define Transition Matrix  ####\r\n#######################################" +
                    "# #\r\n\r\ntime <- 1  # time for rateMatrix in weeks\r\ntransMatrix <- 1 - exp(-rateMa" +
                    "trix / time)\r\ntransMatrix[6:8, 6:8] <- diseaseprobabilities_fitted\r\n\r\n# set diag" +
                    "onal elements to 0 and calculate diagonal elements as 1-(row sum)\r\n\r\ntransMatrix" +
                    " <- recalculate_main_diagonal(transMatrix)\r\ncheck_matrix_row_sum(transMatrix)\r\n\r" +
                    "\n# Print transition matrix\r\n# Save matrices and states to CSV files\r\n\r\nreadr::wr" +
                    "ite_csv(as.data.frame(rateMatrix), file.path(path_data_folder, \"rateMatrix.csv\")" +
                    ") \r\nreadr::write_csv(as.data.frame(transMatrix), file.path(path_data_folder, \"tr" +
                    "ansMatrix.csv\"))\r\nreadr::write_csv(as.data.frame(states), file.path(path_data_fo" +
                    "lder, \"states.csv\"))\r\n\r\nprint(round(transMatrix,3))\r\nprint(round(transMatrix[1:8" +
                    ", 9],3))\r\nprint(states)\r\n\r\n## ####################################### # \r\n##    " +
                    "Time Evolution and Steady State   #### \r\n## ####################################" +
                    "### # \r\n\r\nremission_prob <- as.matrix(df_remission)\r\nprint(round(df_remission[10" +
                    "0,],3))\r\ntransMatrix [1:8, 9] <- remission_prob[100,]\r\nprint(transMatrix)\r\n\r\n###" +
                    "######################################## #\r\n#        Adaptation of transMatrix  " +
                    "     ## #\r\n########################################### #\r\n\r\ntransMatrix_new <- t" +
                    "ransMatrix  \r\n\r\n# Imputation of new Values\r\n\r\n# 1a Diagnosis Rate: Symptomatic -" +
                    "-> Diagnosed x% higher\r\n# Check whether Variable is 0 --> Set to 1 example (do w" +
                    "e need this check?)\r\n\r\n#var_sym_diag_rate\r\ntransMatrix_new [1, 2] <- transMatrix" +
                    "[1, 2] * var_sym_diag_rate                            # Changed Diagnoses Rate\r\n" +
                    "#transMatrix_new [1, 3] <- transMatrix[1, 2] + transMatrix[1, 2] - transMatrix_n" +
                    "ew [1, 2]   # Sum stays the same\r\n\r\n\r\n# 1b var_sym_diag_mean_time_weeks <- 104.3" +
                    "   meantime goes up diag_rate goes down (and vice versa)\r\nvar_sym_diag_mean_time" +
                    "_weeks_default <- 104.3\r\ntransMatrix_new [1, 2] <- transMatrix[1, 2] * (var_sym_" +
                    "diag_mean_time_weeks_default/var_sym_diag_mean_time_weeks)\r\n\r\n\r\n\r\n# 2 Treatment " +
                    "Rate: Diagnosed --> Treatment Start x% higher\r\ntransMatrix_new [2, 4] <- transMa" +
                    "trix[2, 4] * var_diag_treat_rate                                          # Chan" +
                    "ged treatment rate\r\n#transMatrix_new [2, 5] <- transMatrix[2, 5] + transMatrix[2" +
                    ",4] - transMatrix_new[2, 4] * var_diag_treat_rate  # Sum stays the same\r\n\r\n# 3 U" +
                    "ser provided parameters for treament start to ...\r\ntransMatrix_new [4, 6] <- ");
            
            #line 320 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamUncontrolledStandard));
            
            #line default
            #line hidden
            this.Write("\r\ntransMatrix_new [4, 7] <- ");
            
            #line 321 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamaControlledStandard));
            
            #line default
            #line hidden
            this.Write("\r\ntransMatrix_new [4, 8] <- ");
            
            #line 322 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamSymptomFreeStandard));
            
            #line default
            #line hidden
            this.Write(@"



print(transMatrix)
print(transMatrix_new)

steadystate_statusquo <- get_steadystate(transMatrix)
reshaped_steadystate_statusquo <- reshape_steadystate_variables(steadystate_statusquo, states, UCTMatrix, cutoff_highUCT)

steadystate_new <- get_steadystate(transMatrix_new)
reshaped_steadystate_new <- reshape_steadystate_variables(steadystate_new, states, UCTMatrix, cutoff_highUCT)



########################################### #
#       Definition of Interventions      ####
########################################### #


# Educational Effect
# KOL diagnosis program | 36% higher diagnosis rate 

transMatrix_edu <- transMatrix
var_diagratio_edu <- ");
            
            #line 346 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamEducationInterventionPatients));
            
            #line default
            #line hidden
            this.Write(@"

transMatrix_edu[1, 2] <- transMatrix[1, 2] + transMatrix[1, 3] * var_diagratio_edu 
transMatrix_edu[1, 3] <- transMatrix[1, 3] - transMatrix[1, 3] * var_diagratio_edu

# Awareness Campaign improves Diagnosis rate by Factor var_diagrate

var_diagrate_awa <- ");
            
            #line 353 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamAwarenessIntervention));
            
            #line default
            #line hidden
            this.Write(@"
transMatrix_awa <- transMatrix  

transMatrix_awa[1, 2] <- transMatrix[1, 2] * (1+var_diagrate_awa)
transMatrix_awa[1, 3] <- transMatrix[1, 3] * (1+var_diagrate_awa)

# Treatment Effect
# Treatment ratio (DMP) 

transMatrix_dmp <- transMatrix
var_treatmentratio_treat <- ");
            
            #line 363 "C:\NMSE_final\NMSE\NMSE\RTemplates\BaseModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SimProb.Instance.ParamEducationInterventionPhysiciansStart));
            
            #line default
            #line hidden
            this.Write("\r\n\r\ntransMatrix_dmp [2, 4] <- transMatrix[2, 4] + transMatrix[2, 4] * var_treatme" +
                    "ntratio_treat\r\ntransMatrix_dmp [2, 5] <- transMatrix[2, 5] - transMatrix[2, 4] *" +
                    " var_treatmentratio_treat\r\n\r\n\r\n# Combined Effect of all inventions \r\n# treatment" +
                    " ratio (all interventions)\r\n\r\n\r\ntransMatrix_all1 <- transMatrix\r\ntransMatrix_all" +
                    "1[1, 2] <- (transMatrix[1, 2] + transMatrix[1, 3] * var_diagratio_edu) * var_dia" +
                    "grate_awa  \r\n#transMatrix_all1[1, 3] <- (transMatrix[1, 3] - transMatrix[1, 3] *" +
                    " var_diagratio_edu) * var_diagrate_awa  \r\ntransMatrix_all1[2, 4] <- transMatrix[" +
                    "2, 4] + transMatrix[2, 4] * var_treatmentratio_treat  \r\ntransMatrix_all1[2, 5] <" +
                    "- transMatrix[2, 5] - transMatrix[2, 4] * var_treatmentratio_treat\r\n\r\n\r\nsteadyst" +
                    "ate_edu <- get_steadystate(transMatrix_edu)\r\nreshaped_steadystate_edu <- reshape" +
                    "_steadystate_variables(steadystate_edu, states, UCTMatrix, cutoff_highUCT)\r\n\r\n\r\n" +
                    "steadystate_awa <- get_steadystate(transMatrix_awa)\r\nreshaped_steadystate_awa <-" +
                    " reshape_steadystate_variables(steadystate_awa, states, UCTMatrix, cutoff_highUC" +
                    "T)\r\n\r\n\r\nsteadystate_dmp <- get_steadystate(transMatrix_dmp)\r\nreshaped_steadystat" +
                    "e_dmp <- reshape_steadystate_variables(steadystate_dmp, states, UCTMatrix, cutof" +
                    "f_highUCT)\r\n\r\nsteadystate_all1 <- get_steadystate(transMatrix_all1)\r\nreshaped_st" +
                    "eadystate_all1 <- reshape_steadystate_variables(steadystate_all1, states, UCTMat" +
                    "rix, cutoff_highUCT)\r\n\r\n\r\nshare_highUCT_plot <- c( (100-reshaped_steadystate_sta" +
                    "tusquo$share_highUCT),\r\n                         reshaped_steadystate_statusquo$" +
                    "share_highUCT,\r\n                         (100-reshaped_steadystate_new$share_hig" +
                    "hUCT),\r\n                         reshaped_steadystate_new$share_highUCT,\r\n      " +
                    "                   (100-reshaped_steadystate_edu$share_highUCT),\r\n              " +
                    "           reshaped_steadystate_edu$share_highUCT, \r\n                         (1" +
                    "00-reshaped_steadystate_awa$share_highUCT),\r\n                         reshaped_s" +
                    "teadystate_awa$share_highUCT,\r\n                         (100-reshaped_steadystat" +
                    "e_dmp$share_highUCT),\r\n                         reshaped_steadystate_dmp$share_h" +
                    "ighUCT)\r\n\r\n\r\n################################## #\r\n#           Plotting         " +
                    "  ### #\r\n################################## #\r\n\r\n# Barplot steady-state base mod" +
                    "el\r\n\r\nplot_steady_state_base_model <- function(){\r\npar(mar=c(3, 9, 2, 1) + 3, co" +
                    "l.axis=\"darkblue\", col.main=\"darkblue\")\r\nbar_positions <- barplot(\r\n  t(reshaped" +
                    "_steadystate_statusquo$aggregated_states_df),  # Transpose data for correct arra" +
                    "ngement\r\n  beside = TRUE,           # Grouped bars side-by-side\r\n  col = rainbow" +
                    "(5),        # Colors for bars\r\n  names.arg = colnames(reshaped_steadystate_statu" +
                    "squo$aggregated_states_df),  # X-axis labels\r\n  main = \"Steady-state base model\"" +
                    ",  # Chart title\r\n  xlab = \"Population (%)\",          # X-axis label\r\n  horiz = " +
                    "TRUE,                     # Horizontal bars\r\n  las = 1,                         " +
                    " # X-axis labels horizontal\r\n  xlim = c(0, 50),                  # Set x-axis li" +
                    "mit from 0% to 50%\r\n  space = c(0.1, 1)                 # Adjust spacing between" +
                    " bars\r\n)\r\ntext(\r\n  x = t(reshaped_steadystate_statusquo$aggregated_states_df),  " +
                    "# Values of bars\r\n  y = bar_positions,                                          " +
                    "# Position of bars\r\n  labels = round(t(reshaped_steadystate_statusquo$aggregated" +
                    "_states_df), 1), # Display values rounded to 1 decimal\r\n  pos = 4,              " +
                    "                                      # Position text to the right of bars\r\n  ce" +
                    "x = 0.8,                                                  # Size of text\r\n  col " +
                    "= \"darkblue\"                                            # Color of text\r\n)\r\n\r\n}\r" +
                    "\n\r\n# Save the plot as a PNG file\r\npng(file.path(path_figures_folder, \"Steady_sta" +
                    "te_base_model.png\"), width = 800, height = 600)\r\nplot_steady_state_base_model()\r" +
                    "\ndev.off()\r\n\r\n# Save the plot as a PDF file\r\npdf(file.path(path_figures_folder, " +
                    "\"Steady_state_base_model.pdf\"), width = 8, height = 6)\r\nplot_steady_state_base_m" +
                    "odel()\r\ndev.off()\r\n\r\n\r\n\r\n\r\n\r\n# Barplot steady-state new model\r\n\r\nplot_steady_sta" +
                    "te_new_model <- function(){\r\npar(mar=c(3, 9, 2, 1) + 3, col.axis=\"darkblue\", col" +
                    ".main=\"darkblue\")\r\nbar_positions <- barplot(\r\n  t(reshaped_steadystate_new$aggre" +
                    "gated_states_df),  # Transpose data for correct arrangement\r\n  beside = TRUE,   " +
                    "        # Grouped bars side-by-side\r\n  col = rainbow(5),        # Colors for bar" +
                    "s\r\n  names.arg = colnames(reshaped_steadystate_new$aggregated_states_df),  # X-a" +
                    "xis labels\r\n  main = \"Steady-state new model\",  # Chart title\r\n  xlab = \"Populat" +
                    "ion (%)\",          # X-axis label\r\n  horiz = TRUE,                     # Horizon" +
                    "tal bars\r\n  las = 1,                          # X-axis labels horizontal\r\n  xlim" +
                    " = c(0, 50),                  # Set x-axis limit from 0% to 50%\r\n  space = c(0.1" +
                    ", 1)                 # Adjust spacing between bars\r\n)\r\ntext(\r\n  x = t(reshaped_s" +
                    "teadystate_new$aggregated_states_df),  # Values of bars\r\n  y = bar_positions,   " +
                    "                                  # Position of bars\r\n  labels = round(t(reshape" +
                    "d_steadystate_new$aggregated_states_df), 1), # Display values rounded to 1 decim" +
                    "al\r\n  pos = 4,                                               # Position text to " +
                    "the right of bars\r\n  cex = 0.8,                                             # Si" +
                    "ze of text\r\n  col = \"darkblue\"                                       # Color of " +
                    "text\r\n)\r\n}\r\n\r\n# Save the plot as a PNG file\r\npng(file.path(path_figures_folder, " +
                    "\"Steady_state_new_model.png\"), width = 800, height = 600)\r\nplot_steady_state_new" +
                    "_model()\r\ndev.off()\r\n\r\n# Save the plot as a PDF file\r\npdf(file.path(path_figures" +
                    "_folder, \"Steady_state_new_model.pdf\"), width = 8, height = 6)\r\nplot_steady_stat" +
                    "e_new_model()\r\ndev.off()\r\n\r\n####################################################" +
                    "#####################\r\n\r\n\r\n\r\n\r\n# Beispiel-Daten mit Kategorien erstellen\r\nscenar" +
                    "ios <- c(\"01 Base Model\", \"02 New Model\", \"03 Education Model\", \"04 Awareness Mo" +
                    "del\", \"05 DMP Model\")\r\nscenarios <- rep(c(\"01 Base Model\", \"02 New Model\", \"03 E" +
                    "ducation Model\", \"04 Awareness Model\", \"05 DMP Model\"), each = 2)\r\ncategory <- f" +
                    "actor(rep(c(\"Low\", \"High\"), times = 5), levels = c(\"Low\", \"High\"))  # Reihenfolg" +
                    "e festlegen\r\nvalues <- share_highUCT_plot\r\n\r\ndata <- data.frame(scenarios, categ" +
                    "ory, values)\r\n\r\nplot_high_uct <- function(){\r\nggplot(data, aes(x = scenarios, y " +
                    "= values, fill = category)) +\r\n  geom_bar(stat = \"identity\") +\r\n  geom_text(data" +
                    " = subset(data, category == \"High\"), aes(label = round(values, 1)), \r\n          " +
                    "  position = position_stack(vjust = 1.15), size = 4) +  # Nur Werte für \"High\"\r\n" +
                    "  labs(title = \"Share of High UCT\",\r\n       x = \"Scenario\",\r\n       y = \"Percent" +
                    "age (%)\") +\r\n  ylim(0, 100) +  # Skaliert die y-Achse bis 100%\r\n  theme_minimal(" +
                    ") +\r\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\r\n  scale_fill_" +
                    "manual(values = c(\"steelblue\", \"orange\"))  # Farben für die Kategorien\r\n  }\r\n# S" +
                    "ave the plot as PNG and PDF\r\nggsave(filename = file.path(path_figures_folder, \"S" +
                    "hare_of_high_uct.png\"), plot=plot_high_uct(), width = 8, height = 6, units = \"in" +
                    "\")\r\nggsave(filename = file.path(path_figures_folder, \"Share_of_high_uct.pdf\"), p" +
                    "lot=plot_high_uct(), width = 8, height = 6, units = \"in\")\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class BaseModelBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
